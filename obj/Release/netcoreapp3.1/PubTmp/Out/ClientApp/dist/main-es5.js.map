{"version":3,"sources":["src/app/app.component.html","src/app/home/home.component.html","src/app/login/login.component.html","src/app/modality/create/create.component.html","src/app/modality/edit/edit.component.html","src/app/modality/table/table.component.html","src/app/nav-menu/nav-menu.component.html","src/app/neighborhood/create/create.component.html","src/app/neighborhood/edit/edit.component.html","src/app/neighborhood/table/table.component.html","src/app/student/create/create.component.html","src/app/student/edit/edit.component.html","src/app/student/table/table.component.html","src/app/teacher/create/create.component.html","src/app/teacher/edit/edit.component.html","src/app/teacher/table/table.component.html","src/app/user/create/create.component.html","src/app/user/edit/edit.component.html","src/app/user/table/table.component.html","src/$_lazy_route_resource lazy namespace object","src/app/app.component.ts","src/app/app.module.ts","src/app/home/home.component.ts","src/app/login/login.component.ts","src/app/modality/create/create.component.ts","src/app/modality/edit/edit.component.ts","src/app/modality/table/table.component.ts","src/app/nav-menu/nav-menu.component.css","src/app/nav-menu/nav-menu.component.ts","src/app/neighborhood/create/create.component.ts","src/app/neighborhood/edit/edit.component.ts","src/app/neighborhood/table/table.component.ts","src/app/student/create/create.component.ts","src/app/student/edit/edit.component.ts","src/app/student/table/table.component.ts","src/app/teacher/create/create.component.ts","src/app/teacher/edit/edit.component.ts","src/app/teacher/table/table.component.ts","src/app/user/create/create.component.ts","src/app/user/edit/edit.component.ts","src/app/user/table/table.component.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<body>\\r\\n  <router-outlet></router-outlet>\\r\\n</body>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"jumbotron\\\">\\r\\n  <h1>Cruzeiro City Council</h1>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-2 col-md-3 col-sm-4 col-xs-6 text-center dash-icon ng-scope\\\">\\r\\n    <a [routerLink]=\\\"['/students']\\\">\\r\\n      <img src=\\\"assets/images/manage-students.png\\\" width=\\\"128\\\" />\\r\\n      <div>Students</div>\\r\\n    </a>\\r\\n  </div>\\r\\n  <div class=\\\"col-lg-2 col-md-3 col-sm-4 col-xs-6 text-center dash-icon ng-scope\\\">\\r\\n    <a [routerLink]=\\\"['/teachers']\\\">\\r\\n      <img src=\\\"assets/images/manage-teachers.png\\\" width=\\\"128\\\" />\\r\\n      <div>Teachers</div>\\r\\n    </a>\\r\\n  </div>\\r\\n  <div class=\\\"col-lg-2 col-md-3 col-sm-4 col-xs-6 text-center dash-icon ng-scope\\\">\\r\\n    <a [routerLink]=\\\"['/neighborhoods']\\\">\\r\\n      <img src=\\\"assets/images/manage-neighborhood.png\\\" width=\\\"128\\\" />\\r\\n      <div>Neighborhoods</div>\\r\\n    </a>\\r\\n  </div>\\r\\n  <div class=\\\"col-lg-2 col-md-3 col-sm-4 col-xs-6 text-center dash-icon ng-scope\\\">\\r\\n    <a [routerLink]=\\\"['/modalities']\\\">\\r\\n      <img src=\\\"assets/images/manage-classes.png\\\" width=\\\"128\\\" />\\r\\n      <div>Modalities</div>\\r\\n    </a>\\r\\n  </div>\\r\\n  <div class=\\\"col-lg-2 col-md-3 col-sm-4 col-xs-6 text-center dash-icon ng-scope\\\">\\r\\n    <a [routerLink]=\\\"['/users']\\\">\\r\\n      <img src=\\\"assets/images/manage-users.png\\\" width=\\\"128\\\" />\\r\\n      <div>Users</div>\\r\\n    </a>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<header>\\r\\n  <nav class=\\\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/']\\\">Sports Department</a>\\r\\n      <button class=\\\"navbar-toggler\\\"\\r\\n              type=\\\"button\\\"\\r\\n              data-toggle=\\\"collapse\\\"\\r\\n              data-target=\\\".navbar-collapse\\\"\\r\\n              aria-label=\\\"Toggle navigation\\\"\\r\\n              [attr.aria-expanded]=\\\"isExpanded\\\"\\r\\n              (click)=\\\"toggle()\\\">\\r\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n      </button>\\r\\n      <div class=\\\"navbar-collapse collapse d-sm-inline-flex justify-content-end\\\"\\r\\n           [ngClass]=\\\"{ show: isExpanded }\\\">\\r\\n        <ul class=\\\"navbar-nav flex-grow\\\">\\r\\n          <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n            <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/login']\\\">Login</a>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n    </div>\\r\\n  </nav>\\r\\n</header>\\r\\n<form class=\\\"form-signin\\\" #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"login(loginForm)\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <h2 class=\\\"form-signin-heading\\\">Login</h2>\\r\\n    <div *ngIf=\\\"invalidLogin\\\" class=\\\"alert alert-danger\\\">Invalid username or password.</div>\\r\\n    <br />\\r\\n    <label for=\\\"username\\\" class=\\\"sr-only\\\">Email address</label>\\r\\n    <input type=\\\"email\\\" id=\\\"username\\\" name=\\\"email\\\" ngModel class=\\\"form-control\\\" placeholder=\\\"User Name\\\" required autofocus>\\r\\n    <br />\\r\\n    <label for=\\\"password\\\" class=\\\"sr-only\\\">Password</label>\\r\\n    <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" ngModel class=\\\"form-control\\\" placeholder=\\\"Password\\\" required>\\r\\n    <br />\\r\\n    <button class=\\\"btn btn-lg btn-primary btn-block\\\" type=\\\"submit\\\">Sign in</button>\\r\\n  </div>\\r\\n</form>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Create Modality</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Teacher</td>\\r\\n          <td>\\r\\n            <select formControlName=\\\"TeacherId\\\">\\r\\n              <option *ngFor=\\\"let t of teachers\\\" [ngValue]=\\\"t.teacherId\\\">{{t.fullName}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.TeacherId.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.TeacherId.errors.required\\\">Teacher is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Edit Modality</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ID\\\">\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Teacher</td>\\r\\n          <td>\\r\\n            <select formControlName=\\\"TeacherId\\\">\\r\\n              <option *ngFor=\\\"let t of teachers\\\" [ngValue]=\\\"t.teacherId\\\">{{t.fullName}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.TeacherId.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.TeacherId.errors.required\\\">Teacher is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/modalities/create']\\\"><fa-icon [icon]=\\\"faPlus\\\"></fa-icon> Add</a>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <table class=\\\"table table-striped\\\">\\r\\n      <tr>\\r\\n        <td>Id</td>\\r\\n        <td>Modality</td>\\r\\n        <td>Teacher</td>\\r\\n        <td></td>\\r\\n        <td></td>\\r\\n      </tr>\\r\\n      <tr *ngFor=\\\"let d of data\\\">\\r\\n        <td>{{d.modalityId}}</td>\\r\\n        <td>{{d.name}}</td>\\r\\n        <td>{{d.teacher.fullName}}</td>\\r\\n        <td><a [routerLink]=\\\"['/modalities/'+d.modalityId]\\\" class=\\\"btn btn-warning\\\"><fa-icon [icon]=\\\"faEdit\\\"></fa-icon> Edit</a></td>\\r\\n        <td><a (click)=\\\"remove(d.modalityId, d.name)\\\" class=\\\"btn btn-danger\\\"><fa-icon [icon]=\\\"faTrash\\\"></fa-icon> Remove</a></td>\\r\\n      </tr>\\r\\n    </table>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<header>\\r\\n  <nav\\r\\n    class=\\\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\\\"\\r\\n  >\\r\\n    <div class=\\\"container\\\">\\r\\n      <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/']\\\">Sports Department</a>\\r\\n      <button\\r\\n        class=\\\"navbar-toggler\\\"\\r\\n        type=\\\"button\\\"\\r\\n        data-toggle=\\\"collapse\\\"\\r\\n        data-target=\\\".navbar-collapse\\\"\\r\\n        aria-label=\\\"Toggle navigation\\\"\\r\\n        [attr.aria-expanded]=\\\"isExpanded\\\"\\r\\n        (click)=\\\"toggle()\\\"\\r\\n      >\\r\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n      </button>\\r\\n      <div class=\\\"navbar-collapse collapse d-sm-inline-flex justify-content-end\\\"\\r\\n           [ngClass]=\\\"{ show: isExpanded }\\\">\\r\\n        <ul class=\\\"navbar-nav flex-grow\\\">\\r\\n          <li class=\\\"nav-item\\\" style=\\\"padding: 0.5rem\\\"\\r\\n              [routerLinkActive]=\\\"['link-active']\\\"\\r\\n              [routerLinkActiveOptions]=\\\"{ exact: true }\\\">\\r\\n            Welcome {{ username }}!\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\"\\r\\n              [routerLinkActive]=\\\"['link-active']\\\"\\r\\n              [routerLinkActiveOptions]=\\\"{ exact: true }\\\">\\r\\n            <a class=\\\"nav-link text-dark\\\" [routerLink]=\\\"['/']\\\">Home</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['link-active']\\\">\\r\\n            <a class=\\\"nav-link text-dark\\\" (click)=\\\"logOut()\\\">Logout</a>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n    </div>\\r\\n  </nav>\\r\\n</header>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Create new Neighborhood</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Edit Neighborhood</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ID\\\">\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/neighborhoods/create']\\\"><fa-icon [icon]=\\\"faPlus\\\"></fa-icon> Add</a>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <table class=\\\"table table-striped\\\">\\r\\n      <tr>\\r\\n        <td>Id</td>\\r\\n        <td>Neighborhood</td>\\r\\n        <td></td>\\r\\n        <td></td>\\r\\n      </tr>\\r\\n      <tr *ngFor=\\\"let d of data\\\">\\r\\n        <td>{{d.neighborhoodId}}</td>\\r\\n        <td>{{d.name}}</td>\\r\\n        <td><a [routerLink]=\\\"['/neighborhoods/'+d.neighborhoodId]\\\" class=\\\"btn btn-warning\\\"><fa-icon [icon]=\\\"faEdit\\\"></fa-icon> Edit</a></td>\\r\\n        <td><a (click)=\\\"remove(d.neighborhoodId, d.name)\\\" class=\\\"btn btn-danger\\\"><fa-icon [icon]=\\\"faTrash\\\"></fa-icon> Remove</a></td>\\r\\n      </tr>\\r\\n    </table>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Create new Student</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n        <tr>\\r\\n          <td>Surname</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Surname\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Surname.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Surname.errors.required\\\">Surname is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Modality</td>\\r\\n          <td>\\r\\n            <select formControlName=\\\"ModalityId\\\">\\r\\n              <option *ngFor=\\\"let m of modalities\\\" [ngValue]=\\\"m.modalityId\\\">{{m.name}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.ModalityId.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.ModalityId.errors.required\\\">Modality is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Neighborhood</td>\\r\\n          <td>\\r\\n            <select formControlName=\\\"NeighborhoodId\\\">\\r\\n              <option *ngFor=\\\"let n of neighborhoods\\\" [ngValue]=\\\"n.neighborhoodId\\\">{{n.name}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.NeighborhoodId.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.NeighborhoodId.errors.required\\\">Neighborhood is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Edit Student</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Nome</td>\\r\\n          <td>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ID\\\">\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n        <tr>\\r\\n          <td>Surname</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Surname\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Surname.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Surname.errors.required\\\">Surname is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Modality</td>\\r\\n          <td>\\r\\n            <select formControlName=\\\"ModalityId\\\">\\r\\n              <option *ngFor=\\\"let m of modalities\\\" [ngValue]=\\\"m.modalityId\\\">{{m.name}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.ModalityId.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.ModalityId.errors.required\\\">Modality is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Neighborhood</td>\\r\\n          <td>\\r\\n            <select formControlName=\\\"NeighborhoodId\\\">\\r\\n              <option *ngFor=\\\"let n of neighborhoods\\\" [ngValue]=\\\"n.neighborhoodId\\\">{{n.name}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.NeighborhoodId.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.NeighborhoodId.errors.required\\\">Neighborhood is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/students/create']\\\"><fa-icon [icon]=\\\"faPlus\\\"></fa-icon> Add</a>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <table class=\\\"table table-striped\\\">\\r\\n      <tr>\\r\\n        <td>Id</td>\\r\\n        <td>Name</td>\\r\\n        <td>Modality</td>\\r\\n        <td>Neighborhood</td>\\r\\n        <td></td>\\r\\n        <td></td>\\r\\n      </tr>\\r\\n      <tr *ngFor=\\\"let d of data\\\">\\r\\n        <td>{{d.studentId}}</td>\\r\\n        <td>{{d.fullName}}</td>\\r\\n        <td>{{d.modality.name}}</td>\\r\\n        <td>{{d.neighborhood.name}}</td>\\r\\n        <td><a [routerLink]=\\\"['/students/'+d.studentId]\\\" class=\\\"btn btn-warning\\\"><fa-icon [icon]=\\\"faEdit\\\"></fa-icon> Edit</a></td>\\r\\n        <td><a (click)=\\\"remove(d.studentId, d.fullName)\\\" class=\\\"btn btn-danger\\\"><fa-icon [icon]=\\\"faTrash\\\"></fa-icon> Remove</a></td>\\r\\n      </tr>\\r\\n    </table>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Create new Teacher</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Surname</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Surname\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Surname.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Surname.errors.required\\\">Surname is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Phone</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"PhoneNumber\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.PhoneNumber.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.PhoneNumber.errors.required\\\">Phone is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Edit Teacher</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Nome</td>\\r\\n          <td>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ID\\\">\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Sobrenome</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Surname\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Surname.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Surname.errors.required\\\">Surname is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Telefone</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"PhoneNumber\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.PhoneNumber.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.PhoneNumber.errors.required\\\">Phone is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/teachers/create']\\\"><fa-icon [icon]=\\\"faPlus\\\"></fa-icon> Add</a>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <table class=\\\"table table-striped\\\">\\r\\n      <tr>\\r\\n        <td>Id</td>\\r\\n        <td>Name</td>\\r\\n        <td>Phone</td>\\r\\n        <td></td>\\r\\n        <td></td>\\r\\n      </tr>\\r\\n      <tr *ngFor=\\\"let d of data\\\">\\r\\n        <td>{{d.teacherId}}</td>\\r\\n        <td>{{d.fullName}}</td>\\r\\n        <td>{{d.phoneNumber}}</td>\\r\\n        <td><a [routerLink]=\\\"['/teachers/'+d.teacherId]\\\" class=\\\"btn btn-warning\\\"><fa-icon [icon]=\\\"faEdit\\\"></fa-icon> Edit</a></td>\\r\\n        <td><a (click)=\\\"remove(d.teacherId, d.fullName)\\\" class=\\\"btn btn-danger\\\"><fa-icon [icon]=\\\"faTrash\\\"></fa-icon> Remove</a></td>\\r\\n      </tr>\\r\\n    </table>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Create new User</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Email</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Email\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Email.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Email.errors.required\\\">Email is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Password</td>\\r\\n          <td>\\r\\n            <input type=\\\"password\\\" formControlName=\\\"Password\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Password.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Password.errors.required\\\">Password is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n\\r\\n  <form [formGroup]=\\\"MyForm\\\" (ngSubmit)=\\\"this[EventValue]()\\\">\\r\\n\\r\\n    <h3>Edit User</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <td>Name</td>\\r\\n          <td>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ID\\\">\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Name\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Name.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Name.errors.required\\\">Name is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Email</td>\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Email\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Email.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Email.errors.required\\\">Email is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td>Password</td>\\r\\n          <td>\\r\\n            <input type=\\\"password\\\" formControlName=\\\"Password\\\">\\r\\n            <div *ngIf=\\\"submitted && MyForm.controls.Password.errors\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"MyForm.controls.Password.errors.required\\\">Password is required</div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n        <tr>\\r\\n          <td colspan=\\\"2\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n\\r\\n\"","export default \"<app-nav-menu></app-nav-menu>\\r\\n<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/users/create']\\\"><fa-icon [icon]=\\\"faPlus\\\"></fa-icon> Add</a>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <table class=\\\"table table-striped\\\">\\r\\n      <tr>\\r\\n        <td>Name</td>\\r\\n        <td>Email</td>\\r\\n        <td></td>\\r\\n        <td></td>\\r\\n      </tr>\\r\\n      <tr *ngFor=\\\"let d of data\\\">\\r\\n        <td>{{d.name}}</td>\\r\\n        <td>{{d.email}}</td>\\r\\n        <td><a [routerLink]=\\\"['/users/'+d.id]\\\" class=\\\"btn btn-warning\\\"><fa-icon [icon]=\\\"faEdit\\\"></fa-icon> Edit</a></td>\\r\\n        <td><a (click)=\\\"remove(d.id, d.name)\\\" class=\\\"btn btn-danger\\\"><fa-icon [icon]=\\\"faTrash\\\"></fa-icon> Remove</a></td>\\r\\n      </tr>\\r\\n    </table>\\r\\n  </div>\\r\\n</div>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { TeacherTableComponent } from './teacher/table/table.component';\r\nimport { TeacherCreateComponent } from './teacher/create/create.component';\r\nimport { TeacherEditComponent } from './teacher/edit/edit.component';\r\nimport { NeighborhoodTableComponent } from './neighborhood/table/table.component';\r\nimport { NeighborhoodCreateComponent } from './neighborhood/create/create.component';\r\nimport { NeighborhoodEditComponent } from './neighborhood/edit/edit.component';\r\nimport { ModalityTableComponent } from './modality/table/table.component';\r\nimport { ModalityCreateComponent } from './modality/create/create.component';\r\nimport { ModalityEditComponent } from './modality/edit/edit.component';\r\nimport { StudentTableComponent } from './student/table/table.component';\r\nimport { StudentCreateComponent } from './student/create/create.component';\r\nimport { StudentEditComponent } from './student/edit/edit.component';\r\nimport { UserTableComponent } from './user/table/table.component';\r\nimport { UserCreateComponent } from './user/create/create.component';\r\nimport { UserEditComponent } from './user/edit/edit.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavMenuComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    TeacherTableComponent,\r\n    TeacherCreateComponent,\r\n    TeacherEditComponent,\r\n    NeighborhoodTableComponent,\r\n    NeighborhoodCreateComponent,\r\n    NeighborhoodEditComponent,\r\n    ModalityTableComponent,\r\n    ModalityCreateComponent,\r\n    ModalityEditComponent,\r\n    StudentTableComponent,\r\n    StudentCreateComponent,\r\n    StudentEditComponent,\r\n    UserTableComponent,\r\n    UserCreateComponent,\r\n    UserEditComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FontAwesomeModule,\r\n    BrowserAnimationsModule,\r\n    RouterModule.forRoot([\r\n      { path: '', component: HomeComponent, pathMatch: 'full' },\r\n      { path: 'login', component: LoginComponent },\r\n      { path: 'teachers', component: TeacherTableComponent },\r\n      { path: 'teachers/create', component: TeacherCreateComponent },\r\n      { path: 'teachers/:ID', component: TeacherEditComponent },\r\n      { path: 'neighborhoods', component: NeighborhoodTableComponent },\r\n      { path: 'neighborhoods/create', component: NeighborhoodCreateComponent },\r\n      { path: 'neighborhoods/:ID', component: NeighborhoodEditComponent },\r\n      { path: 'modalities', component: ModalityTableComponent },\r\n      { path: 'modalities/create', component: ModalityCreateComponent },\r\n      { path: 'modalities/:ID', component: ModalityEditComponent },\r\n      { path: 'students', component: StudentTableComponent },\r\n      { path: 'students/create', component: StudentCreateComponent },\r\n      { path: 'students/:ID', component: StudentEditComponent },\r\n      { path: 'users', component: UserTableComponent },\r\n      { path: 'users/create', component: UserCreateComponent },\r\n      { path: 'users/:ID', component: UserEditComponent },\r\n    ]),\r\n    ToastrModule.forRoot()\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n  token: any;\r\n  constructor(private router: Router) {\r\n    //reading the JWT token that will be sent with every AJAX call\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)\r\n      this.router.navigate(['/login']);\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html'\r\n})\r\n/** login component*/\r\nexport class LoginComponent {\r\n  invalidLogin: boolean;\r\n/** login ctor */\r\n  constructor(private http: HttpClient, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n\r\n  }\r\n\r\n  login(form: NgForm) {\r\n    const credentials = JSON.stringify(form.value);\r\n    this.http.post(\"/api/auth/login\", credentials, {\r\n      headers: new HttpHeaders({\r\n        \"Content-Type\": \"application/json\"\r\n      })\r\n    }).subscribe(response => {\r\n      const token = (<any>response).token;\r\n      const username = (<any>response).userName;\r\n      //saves the token on the client side\r\n      localStorage.setItem(\"jwt\", token);\r\n      localStorage.setItem(\"username\", username)\r\n\r\n      this.invalidLogin = false;\r\n      //redirects to the dashboard\r\n      this.router.navigate([\"/\"]);\r\n    }, err => {\r\n      this.invalidLogin = true;\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-create',\r\n    templateUrl: './create.component.html'\r\n})\r\n/** create component*/\r\nexport class ModalityCreateComponent {\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  teacherId: any;\r\n  teachers: any;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n    /** create ctor */\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token) //if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    this.getTeachers();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      TeacherId: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  getTeachers() {\r\n    //load the teachers that will be used in the dropdown\r\n    this.http.get('/api/teachers', this.httpOptions).subscribe(result => {\r\n      this.teachers = result;\r\n    }, error => {\r\n         //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status);\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  } \r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return; //if any field is missing/invalid values then stops action\r\n    }\r\n\r\n    //creating the JSON object with the form fields. ID is 0 as it was not created yet\r\n    var data = { modalityId: 0, Name: this.MyForm.value.Name, teacherId: this.MyForm.value.TeacherId };\r\n    var jData = JSON.stringify(data);\r\n    this.http.post('api/modalities', jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved')\r\n      //redirects to the table\r\n      this.router.navigate(['/modalities']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401) //if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html'\r\n})\r\n/** create component*/\r\nexport class ModalityEditComponent {\r\n  /** create ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  teachers: any;\r\n  mainId = 0;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n\r\n  constructor(private http: HttpClient, private router: Router, private toastr: ToastrService, private route: ActivatedRoute, @Inject('BASE_URL') baseUrl: string) {\r\n    route.params.subscribe(params => this.mainId = params['ID']);\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    //loading data to populate the form fields\r\n    http.get(baseUrl + 'api/modalities/' + this.mainId, this.httpOptions).subscribe(result => {\r\n      this.MyForm.controls[\"ID\"].setValue(result[\"modalityId\"]);\r\n      this.MyForm.controls[\"Name\"].setValue(result[\"name\"]);\r\n      this.MyForm.controls[\"TeacherId\"].setValue(result[\"teacherId\"]);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n\r\n    this.getTeachers();\r\n  }\r\n\r\n  getTeachers() {\r\n    //load the teachers that will be used in the dropdown\r\n    this.http.get('/api/teachers', this.httpOptions).subscribe(result => {\r\n      this.teachers = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      TeacherId: new FormControl(\"\", [Validators.required]),\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n\r\n    //creating the JSON object with the form fields\r\n    var data = { modalityId: this.mainId, Name: this.MyForm.value.Name, teacherId: this.MyForm.value.TeacherId };\r\n    var jData = JSON.stringify(data);\r\n    this.http.put('api/modalities/' + this.mainId, jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved')\r\n      //redirects to the table\r\n      this.router.navigate(['/modalities']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n    selector: 'app-table',\r\n    templateUrl: './table.component.html',\r\n})\r\n/** table component*/\r\nexport class ModalityTableComponent {\r\n    /** table ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n\r\n  faPlus = faPlus;\r\n  faEdit = faEdit;\r\n  faTrash = faTrash;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    //loading data to populate the table\r\n    this.http.get('/api/modalities', this.httpOptions).subscribe(result => {\r\n      this.data = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  edit(id) {\r\n    //redirects to the edit page\r\n    window.open('/modalities/' + id);\r\n  }\r\n\r\n  remove(id, name) {\r\n    //confirms before deleting\r\n    if (confirm('Are you sure that you want to remove this registry? \\r\\n Name: ' + name))\r\n      //making deletion call\r\n      this.http.delete('/api/modalities/' + id, this.httpOptions).subscribe((data: any[]) => {\r\n        //showing a success message\r\n        this.toastr.success('Completed')\r\n        //reloads the table\r\n        this.getData();\r\n      }, error => {\r\n          //shows a an error message\r\n          this.toastr.error('Error Status: ' + error.status)\r\n          if (error.status == 401)//if error is 401 the redirects to login\r\n            this.router.navigate(['/login']);\r\n      });\r\n    else//alerting that deletion was cancelled\r\n      this.toastr.warning('Action cancelled')\r\n  }\r\n\r\n}\r\n","export default \"a.navbar-brand {\\r\\n  white-space: normal;\\r\\n  text-align: center;\\r\\n  word-break: break-all;\\r\\n}\\r\\n\\r\\nhtml {\\r\\n  font-size: 14px;\\r\\n}\\r\\n\\r\\n@media (min-width: 768px) {\\r\\n  html {\\r\\n    font-size: 16px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.box-shadow {\\r\\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\\r\\n}\\r\\n\\r\\n.nav-item{\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbmF2LW1lbnUvbmF2LW1lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFDQTtFQUNFO0lBQ0UsZUFBZTtFQUNqQjtBQUNGOztBQUVBO0VBQ0UsOENBQThDO0FBQ2hEOztBQUVBO0lBQ0ksZUFBZTtBQUNuQiIsImZpbGUiOiJzcmMvYXBwL25hdi1tZW51L25hdi1tZW51LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJhLm5hdmJhci1icmFuZCB7XHJcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xyXG59XHJcblxyXG5odG1sIHtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbn1cclxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XHJcbiAgaHRtbCB7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgfVxyXG59XHJcblxyXG4uYm94LXNoYWRvdyB7XHJcbiAgYm94LXNoYWRvdzogMCAuMjVyZW0gLjc1cmVtIHJnYmEoMCwgMCwgMCwgLjA1KTtcclxufVxyXG5cclxuLm5hdi1pdGVte1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcbiJdfQ== */\"","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent {\r\n  isExpanded = false;\r\n  username = \"User\";\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n\r\n  token: any;\r\n  constructor(private router: Router) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    this.username = localStorage.getItem(\"username\");//to create the hello message\r\n  }\r\n\r\n  logOut() {\r\n    localStorage.removeItem(\"jwt\");//removing jwt from client side\r\n    localStorage.removeItem(\"username\");\r\n    this.token = null;\r\n    this.router.navigate(['/login']); //redirects to login\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr'; \r\n\r\n@Component({\r\n    selector: 'app-create',\r\n    templateUrl: './create.component.html'\r\n})\r\n/** create component*/\r\nexport class NeighborhoodCreateComponent {\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n    /** create ctor */\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n  }\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n\r\n    //creating the JSON object with the form fields. ID is 0 as it was not created yet\r\n    var data = { id: 0, name: this.MyForm.value.Name };\r\n    var jData = JSON.stringify(data);\r\n    this.http.post('api/neighborhoods', jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/neighborhoods']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html'\r\n})\r\n/** create component*/\r\nexport class NeighborhoodEditComponent {\r\n  /** create ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  mainId = 0;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n\r\n  constructor(private http: HttpClient, private router: Router, private toastr: ToastrService, private route: ActivatedRoute, @Inject('BASE_URL') baseUrl: string) {\r\n    route.params.subscribe(params => this.mainId = params['ID']);\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    //loading data to populate the form fields\r\n    http.get(baseUrl + 'api/neighborhoods/' + this.mainId, this.httpOptions).subscribe(result => {\r\n      this.MyForm.controls[\"ID\"].setValue(result[\"neighborhoodId\"]);\r\n      this.MyForm.controls[\"Name\"].setValue(result[\"name\"]);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n    //creating the JSON object with the form fields\r\n    var data = { neighborhoodId: this.mainId, name: this.MyForm.value.Name };\r\n    var jData = JSON.stringify(data);\r\n    this.http.put('api/neighborhoods/' + this.mainId, jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects back to the table\r\n      this.router.navigate(['/neighborhoods']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n    selector: 'app-table',\r\n    templateUrl: './table.component.html',\r\n})\r\n/** table component*/\r\nexport class NeighborhoodTableComponent {\r\n    /** table ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n\r\n  faPlus = faPlus;\r\n  faEdit = faEdit;\r\n  faTrash = faTrash;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    //loading data to populate the table\r\n    this.http.get('/api/neighborhoods', this.httpOptions).subscribe(result => {\r\n      this.data = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  edit(id) {\r\n    //redirects to the edit page\r\n    window.open('/neighborhoods/' + id);\r\n  }\r\n\r\n  remove(id, name) {\r\n    //confirms before deleting\r\n    if (confirm('Are you sure that you want to remove this registry? \\r\\n Name: ' + name))\r\n      //making deletion call\r\n      this.http.delete('/api/neighborhoods/' + id, this.httpOptions).subscribe((data: any[]) => {\r\n        //showing a success message\r\n        this.toastr.success(\"Completed\");\r\n        //reloads the table\r\n        this.getData();\r\n      }, error => {\r\n          //shows an error message\r\n          this.toastr.error('Error Status: ' + error.status)\r\n          if (error.status == 401)//if error is 401 the redirects to login\r\n            this.router.navigate(['/login']);\r\n      });\r\n    else//alerting that deletion was cancelled\r\n      this.toastr.warning('Action Cancelled!');\r\n  }\r\n\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-create',\r\n    templateUrl: './create.component.html'\r\n})\r\n/** create component*/\r\nexport class StudentCreateComponent {\r\n/** create ctor */\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  modalityId: any;\r\n  neighborhoodId: any;\r\n  modalities: any;\r\n  neighborhoods: any;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    this.getModalities();\r\n    this.getNeighborhoods();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      Surname: new FormControl(\"\", [Validators.required]),\r\n      ModalityId: new FormControl(\"\", [Validators.required]),\r\n      NeighborhoodId: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  getModalities() {\r\n    //load the modalities that will be used in the dropdown\r\n    this.http.get('/api/modalities', this.httpOptions).subscribe(result => {\r\n      this.modalities = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  getNeighborhoods() {\r\n    //load the neighborhoods that will be used in the dropdown\r\n    this.http.get('/api/neighborhoods', this.httpOptions).subscribe(result => {\r\n      this.neighborhoods = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n    //creating the JSON object with the form fields. ID is 0 as it was not created yet\r\n    var data = { studentId: 0, Name: this.MyForm.value.Name, Surname: this.MyForm.value.Surname, modalityId: this.MyForm.value.ModalityId, neighborhoodId: this.MyForm.value.NeighborhoodId };\r\n    var jData = JSON.stringify(data);\r\n    this.http.post('api/students', jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/students']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html'\r\n})\r\n/** create component*/\r\nexport class StudentEditComponent {\r\n  /** create ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  modalities: any;\r\n  neighborhoods: any;\r\n  mainId = 0;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, private route: ActivatedRoute, @Inject('BASE_URL') baseUrl: string) {\r\n    route.params.subscribe(params => this.mainId = params['ID']);\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    //loading data to populate the form fields\r\n    http.get(baseUrl + 'api/students/' + this.mainId, this.httpOptions).subscribe(result => {\r\n      this.MyForm.controls[\"ID\"].setValue(result[\"modalityId\"]);\r\n      this.MyForm.controls[\"Name\"].setValue(result[\"name\"]);\r\n      this.MyForm.controls[\"Surname\"].setValue(result[\"surname\"]);\r\n      this.MyForm.controls[\"ModalityId\"].setValue(result[\"modalityId\"]);\r\n      this.MyForm.controls[\"NeighborhoodId\"].setValue(result[\"neighborhoodId\"]);\r\n    }, error => {\r\n      //shows an error message\r\n      this.toastr.error('Error Status: ' + error.status);\r\n      if (error.status == 401)//if error is 401 the redirects to login\r\n        this.router.navigate(['/login']);\r\n    });\r\n\r\n    this.getModalities();\r\n    this.getNeighborhoods();\r\n  }\r\n\r\n  getModalities() {\r\n    //load the modalities that will be used in the dropdown\r\n    this.http.get('/api/modalities', this.httpOptions).subscribe(result => {\r\n      this.modalities = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  getNeighborhoods() {\r\n    //load the neighborhoods that will be used in the dropdown\r\n    this.http.get('/api/neighborhoods', this.httpOptions).subscribe(result => {\r\n      this.neighborhoods = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      Surname: new FormControl(\"\", [Validators.required]),\r\n      ModalityId: new FormControl(\"\", [Validators.required]),\r\n      NeighborhoodId: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n\r\n    //creating the JSON object with the form fields\r\n    var data = { studentId: this.mainId, Name: this.MyForm.value.Name, Surname: this.MyForm.value.Surname, modalityId: this.MyForm.value.ModalityId, neighborhoodId: this.MyForm.value.NeighborhoodId };\r\n    var jData = JSON.stringify(data);\r\n    this.http.put('api/students/' + this.mainId, jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/students']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n    selector: 'app-table',\r\n    templateUrl: './table.component.html',\r\n})\r\n/** table component*/\r\nexport class StudentTableComponent {\r\n    /** table ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n\r\n  faPlus = faPlus;\r\n  faEdit = faEdit;\r\n  faTrash = faTrash;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    //loading data to populate the table\r\n    this.http.get('/api/students', this.httpOptions).subscribe(result => {\r\n      this.data = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  edit(id) {\r\n    //redirects to the edit page\r\n    window.open('/students/' + id);\r\n  }\r\n\r\n  remove(id, name) {\r\n    //confirms before deleting\r\n    if (confirm('Are you sure that you want to remove this registry? \\r\\n Name: ' + name))\r\n      //making deletion call\r\n      this.http.delete('/api/students/' + id, this.httpOptions).subscribe((data: any[]) => {\r\n        //showing a success message\r\n        this.toastr.success('Completed');\r\n        //reloads the table\r\n        this.getData();\r\n      }, error => {\r\n          //shows an error message\r\n          this.toastr.error('Error Status: ' + error.status)\r\n          if (error.status == 401)//if error is 401 the redirects to login\r\n            this.router.navigate(['/login']);\r\n      });\r\n    else//alerting that deletion was cancelled\r\n      this.toastr.warning('Action Cancelled');\r\n  }\r\n\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-create',\r\n    templateUrl: './create.component.html'\r\n})\r\n/** create component*/\r\nexport class TeacherCreateComponent {\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n  /** create ctor */\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      Surname: new FormControl(\"\", [Validators.required]),\r\n      PhoneNumber: new FormControl(\"\", [Validators.required])\r\n    });\r\n  } \r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n    //creating the JSON object with the form fields. ID is 0 as it was not created yet\r\n    var data = { id: 0, name: this.MyForm.value.Name, surname: this.MyForm.value.Surname, phoneNumber: this.MyForm.value.PhoneNumber };\r\n    var jData = JSON.stringify(data);\r\n    this.http.post('api/teachers', jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/teachers']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html'\r\n})\r\n/** create component*/\r\nexport class TeacherEditComponent {\r\n  /** create ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  mainId = 0;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, private route: ActivatedRoute, @Inject('BASE_URL') baseUrl: string) {\r\n    route.params.subscribe(params => this.mainId = params['ID']);\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    //loading data to populate the form fields\r\n    http.get(baseUrl + 'api/teachers/' + this.mainId, this.httpOptions).subscribe(result => {\r\n      this.MyForm.controls[\"ID\"].setValue(result[\"teacherId\"]);\r\n      this.MyForm.controls[\"Name\"].setValue(result[\"name\"]);\r\n      this.MyForm.controls[\"Surname\"].setValue(result[\"surname\"]);\r\n      this.MyForm.controls[\"PhoneNumber\"].setValue(result[\"phoneNumber\"]);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error(\"Error Status: \" + error.status);\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      Surname: new FormControl(\"\", [Validators.required]),\r\n      PhoneNumber: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n\r\n    //creating the JSON object with the form fields\r\n    var data = { teacherId: this.mainId, name: this.MyForm.value.Name, surname: this.MyForm.value.Surname, phoneNumber: this.MyForm.value.PhoneNumber };\r\n    var jData = JSON.stringify(data);\r\n    this.http.put('api/teachers/' + this.mainId, jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/teachers']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n    selector: 'app-table',\r\n    templateUrl: './table.component.html',\r\n})\r\n/** table component*/\r\nexport class TeacherTableComponent {\r\n    /** table ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n\r\n  faPlus = faPlus;\r\n  faEdit = faEdit;\r\n  faTrash = faTrash;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    //loading data to populate the table\r\n    this.http.get('/api/teachers', this.httpOptions).subscribe(result => {\r\n      this.data = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  edit(id) {\r\n    //redirects to the edit page\r\n    window.open('/teachers/' + id);\r\n  }\r\n\r\n  remove(id, name) {\r\n    //confirms before deleting\r\n    if (confirm('Are you sure that you want to remove this registry? \\r\\n Name: ' + name))\r\n      //making deletion call\r\n      this.http.delete('/api/teachers/' + id, this.httpOptions).subscribe((data: any[]) => {\r\n        //showing a success message\r\n        this.toastr.success('Completed')\r\n        //reloads the table\r\n        this.getData();\r\n      }, error => {\r\n          //shows an error message\r\n          this.toastr.error('Error Status: ' + error.status)\r\n          if (error.status == 401)//if error is 401 the redirects to login\r\n            this.router.navigate(['/login']);\r\n      });\r\n    else//alerting that deletion was cancelled\r\n      this.toastr.warning('Action Cancelled');\r\n  }\r\n\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'app-create',\r\n    templateUrl: './create.component.html'\r\n})\r\n/** create component*/\r\nexport class UserCreateComponent {\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n  /** create ctor */\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      Email: new FormControl(\"\", [Validators.required, Validators.email]),\r\n      Password: new FormControl(\"\", [Validators.required])\r\n    });\r\n  } \r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n    //creating the JSON object with the form fields. ID is 0 as it was not created yet\r\n    var data = { id: 0, name: this.MyForm.value.Name, email: this.MyForm.value.Email, password: this.MyForm.value.Password };\r\n    var jData = JSON.stringify(data);\r\n    this.http.post('api/users', jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/users']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html'\r\n})\r\n/** create component*/\r\nexport class UserEditComponent {\r\n  /** create ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n  mainId = 0;\r\n  MyForm: FormGroup;\r\n  submitted = false;\r\n  EventValue: any = \"Save\";\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, private route: ActivatedRoute, @Inject('BASE_URL') baseUrl: string) {\r\n    route.params.subscribe(params => this.mainId = params['ID']);\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    //loading data to populate the form fields\r\n    http.get(baseUrl + 'api/users/' + this.mainId, this.httpOptions).subscribe(result => {\r\n      this.MyForm.controls[\"ID\"].setValue(result[\"id\"]);\r\n      this.MyForm.controls[\"Name\"].setValue(result[\"name\"]);\r\n      this.MyForm.controls[\"Email\"].setValue(result[\"email\"]);\r\n      this.MyForm.controls[\"Password\"].setValue(result[\"password\"]);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error(\"Error Status: \" + error.status);\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //initialize the html form\r\n    this.MyForm = new FormGroup({\r\n      ID: new FormControl(null),\r\n      Name: new FormControl(\"\", [Validators.required]),\r\n      Email: new FormControl(\"\", [Validators.required]),\r\n      Password: new FormControl(\"\", [Validators.required])\r\n    });\r\n  }\r\n\r\n  Save() {\r\n    this.submitted = true;\r\n\r\n    if (this.MyForm.invalid) {\r\n      return;//if any field is missing/invalid values then stops action\r\n    }\r\n    //creating the JSON object with the form fields\r\n    var data = { id: this.mainId, name: this.MyForm.value.Name, email: this.MyForm.value.Email, password: this.MyForm.value.Password };\r\n    var jData = JSON.stringify(data);\r\n    this.http.put('api/users/' + this.mainId, jData, this.httpOptions).subscribe((data: any[]) => {\r\n      //showing a success message\r\n      this.toastr.success('Data Saved');\r\n      //redirects to the table\r\n      this.router.navigate(['/users']);\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status)\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Router } from \"@angular/router\";\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n    selector: 'app-table',\r\n    templateUrl: './table.component.html',\r\n})\r\n/** table component*/\r\nexport class UserTableComponent {\r\n    /** table ctor */\r\n\r\n  data: any;\r\n  token: any;\r\n  httpOptions: object;\r\n\r\n  faPlus = faPlus;\r\n  faEdit = faEdit;\r\n  faTrash = faTrash;\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService, private router: Router, @Inject('BASE_URL') baseUrl: string) {\r\n    this.token = localStorage.getItem(\"jwt\");\r\n    if (!this.token)//if token is inexistent then redirects to login\r\n      this.router.navigate(['/login']);\r\n\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + this.token//adds token as the Authorization header\r\n      })\r\n    };\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    //loading data to populate the table\r\n    this.http.get('/api/users', this.httpOptions).subscribe(result => {\r\n      this.data = result;\r\n    }, error => {\r\n        //shows an error message\r\n        this.toastr.error('Error Status: ' + error.status);\r\n        if (error.status == 401)//if error is 401 the redirects to login\r\n          this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  edit(id) {\r\n    //redirects to the edit page\r\n    window.open('/teachers/' + id);\r\n  }\r\n\r\n  remove(id, name) {\r\n    //confirms before deleting\r\n    if (confirm('Are you sure that you want to remove this registry? \\r\\n Name: ' + name))\r\n      //making deletion call\r\n      this.http.delete('/api/users/' + id, this.httpOptions).subscribe((data: any[]) => {\r\n        //showing a success message\r\n        this.toastr.success('Completed')\r\n        //reloads the table\r\n        this.getData();\r\n      }, error => {\r\n          if (error.status == 409)//if error is 409 let's user know that they can't delete themselves\r\n            this.toastr.error('You cannot delete your own account! Error: ' + error.status);\r\n          else //shows a generic error message\r\n            this.toastr.error('Error Status: ' + error.status)\r\n          if (error.status == 401)//if error is 401 the redirects to login\r\n            this.router.navigate(['/login']);\r\n      });\r\n    else//alerting that deletion was cancelled\r\n      this.toastr.warning('Action Cancelled');\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}